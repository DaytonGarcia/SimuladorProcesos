/*
 * Universidad de San Carlos de Guatemala
 * Facultad de Ingenieria
 * Proyecto de Simulacion de Procesos
 * Sistemas Operativos 1
 * Dayton Garcia
 */

package AnalizadorSimulacion;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code 
{:
    public ArrayList<Recurso> recursos = new ArrayList<Recurso>();
    public ArrayList<Tiempo> tiempos = new ArrayList<Tiempo>();
    public int pActual;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal String SIMULACION,RECURSO,TIEMPO,PROCESO,ASIGNAR,LIBERAR,TERMINAR,R;
terminal String LLAVE_A,LLAVE_C,PAR_A,PAR_C,PUNTOCOMA,COMA;
terminal String ENTERO;

non terminal S;
non terminal Declaracion;
non terminal Time;
non terminal ProcesoS Process;
non terminal Cuerpo;
non terminal ArrayList<ProcesoS> LProcesos;
non terminal Acciones;
non terminal Accion;
non terminal PAsignar;
non terminal PLiberar;
non terminal PTerminar;
non terminal ArrayList<Integer> LISTA_ID;

start with S; 

S::=SIMULACION LLAVE_A Cuerpo LLAVE_C {:System.out.println("El numero de recursos es: "+parser.recursos.size());:}
;

Cuerpo ::= Declaracion Cuerpo 
 | Time Cuerpo 
 | error Cuerpo 
 | Declaracion 
 | Time 
 | error 
; 

Declaracion ::= 
   RECURSO R ENTERO:i PUNTOCOMA {:Recurso n = new Recurso(i);
                                  parser.recursos.add(n);:}
;

Time  ::= 
    TIEMPO PAR_A ENTERO:ii PAR_C LLAVE_A {:
    Tiempo t = new Tiempo(Integer.parseInt(ii.trim()));
    if(parser.tiempos.size()>0)
    {
        for (int i=0; i<=parser.tiempos.get(parser.tiempos.size()-1).proceso.size(); i++)
        {
            ProcesoS p = new ProcesoS();
            p.id = parser.tiempos.get(parser.tiempos.size()-1).proceso.get(i).id;
            for (int j=0; j<= parser.tiempos.get(parser.tiempos.size()-1).proceso.get(i).recursos.size(); j++)
            {
                Recurso r = new Recurso();
                r.setId(parser.tiempos.get(parser.tiempos.size()-1).proceso.get(i).recursos.get(j).getId());
                r.setEstado(parser.tiempos.get(parser.tiempos.size()-1).proceso.get(i).recursos.get(j).getEstado());
                r.setAsigando(parser.tiempos.get(parser.tiempos.size()-1).proceso.get(i).recursos.get(j).getAsigando());
                p.recursos.add(r);
            }
            t.proceso.add(p);
        }
    }
    parser.tiempos.add(t);
:} LProcesos LLAVE_C   
;

LProcesos ::=
 Process:p 
{:if(parser.tiempos.get(parser.tiempos.size()-1).proceso.size()>0)
             {
                int coincidencia = 0;
                for (int i = 0; i<=parser.tiempos.get(parser.tiempos.size()-1).proceso.size(); i++)
                {
                    if(p.id==parser.tiempos.get(parser.tiempos.size()-1).proceso.get(i).id)
                    {
                        coincidencia++;
                    }
                }
                if(coincidencia == 0)
                    parser.tiempos.get(parser.tiempos.size()-1).proceso.add(p);
                
             }
             else
             {
                parser.tiempos.get(parser.tiempos.size()-1).proceso.add(p);
             }
:}
LProcesos
|Process:p {:if(parser.tiempos.get(parser.tiempos.size()-1).proceso.size()>0)
             {
                int coincidencia = 0;
                for (int i = 0; i<=parser.tiempos.get(parser.tiempos.size()-1).proceso.size(); i++)
                {
                    if(p.id==parser.tiempos.get(parser.tiempos.size()-1).proceso.get(i).id)
                    {
                        coincidencia++;
                    }
                }
                if(coincidencia == 0)
                    parser.tiempos.get(parser.tiempos.size()-1).proceso.add(p);
                
             }
             else
             {
                parser.tiempos.get(parser.tiempos.size()-1).proceso.add(p);
             }
:} 
;

Process ::=
PROCESO PAR_A ENTERO:i PAR_C {:parser.pActual = Integer.parseInt(i.trim());:} LLAVE_A Acciones LLAVE_C
;

Acciones ::= Accion Acciones 
| Accion 
;

Accion ::= PAsignar | PLiberar | PTerminar;

PAsignar ::= ASIGNAR PAR_A LISTA_ID:l PAR_C PUNTOCOMA {:RESULT = l;:}
;

PLiberar ::= LIBERAR PAR_A LISTA_ID:l PAR_C PUNTOCOMA {:RESULT = l;:}
;

PTerminar ::= TERMINAR PAR_A PAR_C PUNTOCOMA 
;

LISTA_ID ::= R ENTERO:i COMA LISTA_ID:l {:
                                        l.add(Integer.parseInt(i.trim()));
                                        RESULT = l;
                                    :}
            |R ENTERO:i {:
                            ArrayList<Integer> l = new ArrayList<Integer>();
                            l.add(Integer.parseInt(i.trim()));
                            RESULT = l;
                        :} 
            ;


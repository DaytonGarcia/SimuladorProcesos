
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 14 00:56:07 CST 2016
//----------------------------------------------------

package AnalizadorSimulacion;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 14 00:56:07 CST 2016
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\006\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\003\006\000" +
    "\002\016\002\000\002\004\012\000\002\007\004\000\002" +
    "\007\003\000\002\017\002\000\002\005\012\000\002\010" +
    "\004\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\007\000\002\013\007\000" +
    "\002\014\006\000\002\015\006\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\004\005\001\002\000\004\002\075\001" +
    "\002\000\004\014\006\001\002\000\010\003\010\005\007" +
    "\006\013\001\002\000\004\013\072\001\002\000\012\003" +
    "\010\005\007\006\013\015\ufffa\001\002\000\012\003\010" +
    "\005\007\006\013\015\ufffb\001\002\000\012\003\010\005" +
    "\007\006\013\015\ufffc\001\002\000\004\016\016\001\002" +
    "\000\004\015\015\001\002\000\004\002\000\001\002\000" +
    "\004\022\017\001\002\000\004\017\ufff8\001\002\000\004" +
    "\017\021\001\002\000\004\014\022\001\002\000\004\007" +
    "\025\001\002\000\004\015\066\001\002\000\006\007\025" +
    "\015\ufff5\001\002\000\004\016\026\001\002\000\004\022" +
    "\027\001\002\000\004\017\ufff4\001\002\000\004\017\031" +
    "\001\002\000\004\014\032\001\002\000\010\010\042\011" +
    "\041\012\040\001\002\000\012\010\uffef\011\uffef\012\uffef" +
    "\015\uffef\001\002\000\012\010\042\011\041\012\040\015" +
    "\ufff1\001\002\000\012\010\uffee\011\uffee\012\uffee\015\uffee" +
    "\001\002\000\012\010\ufff0\011\ufff0\012\ufff0\015\ufff0\001" +
    "\002\000\004\015\063\001\002\000\004\016\060\001\002" +
    "\000\004\016\054\001\002\000\004\016\043\001\002\000" +
    "\004\013\045\001\002\000\006\017\050\021\047\001\002" +
    "\000\004\022\046\001\002\000\006\017\uffe9\021\uffe9\001" +
    "\002\000\004\013\052\001\002\000\004\020\051\001\002" +
    "\000\012\010\uffed\011\uffed\012\uffed\015\uffed\001\002\000" +
    "\004\022\053\001\002\000\006\017\uffea\021\uffea\001\002" +
    "\000\004\013\045\001\002\000\006\017\056\021\047\001" +
    "\002\000\004\020\057\001\002\000\012\010\uffec\011\uffec" +
    "\012\uffec\015\uffec\001\002\000\004\017\061\001\002\000" +
    "\004\020\062\001\002\000\012\010\uffeb\011\uffeb\012\uffeb" +
    "\015\uffeb\001\002\000\006\007\ufff3\015\ufff3\001\002\000" +
    "\004\015\ufff2\001\002\000\004\015\ufff6\001\002\000\012" +
    "\003\ufff7\005\ufff7\006\ufff7\015\ufff7\001\002\000\004\015" +
    "\uffff\001\002\000\004\015\ufffe\001\002\000\004\015\ufffd" +
    "\001\002\000\004\022\073\001\002\000\004\020\074\001" +
    "\002\000\012\003\ufff9\005\ufff9\006\ufff9\015\ufff9\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\011\004\010\006\013\001\001" +
    "\000\002\001\001\000\010\003\011\004\010\006\070\001" +
    "\001\000\010\003\011\004\010\006\067\001\001\000\010" +
    "\003\011\004\010\006\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\023\007\022\001\001\000\002\001\001\000\006" +
    "\005\023\007\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\036\011\033\012\035\013\032\014" +
    "\034\001\001\000\002\001\001\000\014\010\063\011\033" +
    "\012\035\013\032\014\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Recurso> recursos = new ArrayList<Recurso>();
    public ArrayList<Tiempo> tiempos = new ArrayList<Tiempo>();
    public ProcesoS pActual;
    public Tiempo tActual;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_ID ::= R ENTERO 
            {
              ArrayList<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList<Integer> l = new ArrayList<Integer>();
                            l.add(Integer.parseInt(i.trim()));
                            RESULT = l;
                              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_ID ::= LISTA_ID COMA R ENTERO 
            {
              ArrayList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                          l.add(Integer.parseInt(i.trim()));
                                          RESULT = l;

  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PTerminar ::= TERMINAR PAR_A PAR_C PUNTOCOMA 
            {
              Object RESULT =null;
		
                                                //Si se termina el proceso debe eliminarse del tiempo
                                                

                                                int cantRecursos = parser.recursos.size(); //Obtengo el tamano
                                                          
                                                          for (int j=0;j<cantRecursos; j++)
                                                          {
                                                            Recurso n = parser.recursos.get(j);
                                                              if(n.getAsigando()==parser.pActual.id)
                                                              { //si el recurso esta en la lista
                                                                n.setAsigando(0); //Limpio la asignacion
                                                                n.setEstado(0); //lo libero
                                                              }
                                                          }
                                                parser.tActual.proceso.remove(parser.pActual);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PTerminar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PLiberar ::= LIBERAR PAR_A LISTA_ID PAR_C PUNTOCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("Liberar lista la cantidad de recursos son "+ l.size());
                                                        int act = parser.pActual.id;
                                                        //Para liberar un recurso debo recorrer 3 listas
                                                        //La lista de recursos si esta asignado y cambiar el estado
                                                        
                                                        int cantRecursos = parser.recursos.size(); //Obtengo el tamano
                                                          for (int j=0;j<cantRecursos; j++)
                                                          {
                                                            Recurso n = parser.recursos.get(j);
                                                            int tamLista = l.size();

                                                            for(int i=0; i<tamLista; i++)
                                                            {
                                                              if(n.getId() == l.get(i)) //si el recurso esta en la lista
                                                               { n.setAsigando(0); //Limpio la asignacion
                                                                n.setEstado(0); //lo libero
                                                              }

                                                            }
                                                          }

                                                          //El segundo recorrido es recorrer la lista de asignados
                                                          int tamAsignado = parser.pActual.asignados.size(); //tam lista de asignados

                                                          for (int j =0; j<tamAsignado; j++)
                                                          {
                                                            int tamLista = l.size();
                                                            for(int i=0; i<tamLista; i++)
                                                            {
                                                              if(parser.pActual.asignados.get(j) == l.get(i)) //si el recurso esta en la lista
                                                                parser.pActual.asignados.set(j,0); //remuevo el recurso en este indice
                                                            }
                                                          }

                                                          //El siguiente recorrido es similar, es la lista de recursos.
                                                          
                                                          int tamRecursos = parser.pActual.recursos.size();

                                                          System.out.println("El proceso actual es "+parser.pActual.id+" y la cant de recursos que tiene es "+parser.pActual.recursos.size());
                                                           for (int i=0; i <parser.pActual.recursos.size();i++)
                                                           {
                                                              
                                                              for(int nodo:l)
                                                              {
                                                                if(nodo==parser.pActual.recursos.get(i))
                                                                  parser.pActual.recursos.set(i,0);
                                                              }
                                                              System.out.println("El recurso es "+parser.pActual.recursos.get(i));

                                                           }
                                                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PLiberar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PAsignar ::= ASIGNAR PAR_A LISTA_ID PAR_C PUNTOCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("Asignar lista la cantidad de recursos son "+ l.size());
                                                        int tam = l.size(); //El tamano de la lista de recursos solicitados
                                                        for (int i=0;i<tam; i++) //Recorrer la lista de recursos solicitados
                                                        {
                                                          int solicitado = l.get(i); // el numero del recurso solicitado;
                                                          //Ahora voy a recorrer la lista donde esta declarados los recursos
                                                          int cantRecursos = parser.recursos.size(); //Obtengo el tamano
                                                          for (int j=0;j<cantRecursos; j++)
                                                          {
                                                            Recurso n = parser.recursos.get(j);
                                                            if(solicitado == n.getId()) // si el solicitado es el que esta en la lista
                                                            {
                                                              if(n.getEstado() ==1) //El registro esta ocupado
                                                              {
                                                                //Si esta ocupado lo agrego a la lista de solicitados
                                                                parser.pActual.recursos.add(n.getId());
                                                              }
                                                              else //Si no esta ocupado lo camibio a ocuapo y lo agrego a la lista de recursos
                                                              {
                                                                n.setEstado(1);
                                                                n.setAsigando(parser.pActual.id);
                                                                parser.pActual.asignados.add(n.getId());
                                                              }
                                                            }
                                                          }
                                                        }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PAsignar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Accion ::= PTerminar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Accion ::= PLiberar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Accion ::= PAsignar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Acciones ::= Accion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Acciones",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Acciones ::= Accion Acciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Acciones",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Process ::= PROCESO PAR_A ENTERO NT$1 PAR_C LLAVE_A Acciones LLAVE_C 
            {
              ProcesoS RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ProcesoS) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Process",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              ProcesoS RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                          //Aca el tiempo actual ya tiene todos los procesos anteriores entonces debo verificar si ya existe en esa lista
                          int cProcesos = parser.tActual.proceso.size(); //numero de procesos en t actual
                          int coincidencias = 0; //si hay una coicidencia es decir si el proceso ya existe esta var sera 0
                          int numP= Integer.parseInt(ii.trim());
                          for (int i=0; i<cProcesos; i++)
                          {
                            if(numP==parser.tActual.proceso.get(i).id) // si son iguales sumo la conicidencia
                              {
                                coincidencias++;
                                parser.pActual = parser.tActual.proceso.get(i); //El p actual es igual a la coicidencia
                              }
                          }
                          if(coincidencias==0)// si no hay coincidencas creo el nuevo proceso
                          {
                            parser.pActual = new ProcesoS(numP);
                            parser.tActual.proceso.add(parser.pActual); //si este proceso no existe en la lista de t lo agrego
                          }

  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LProcesos ::= Process 
            {
              ArrayList<ProcesoS> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LProcesos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LProcesos ::= Process LProcesos 
            {
              ArrayList<ProcesoS> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LProcesos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Time ::= TIEMPO PAR_A ENTERO NT$0 PAR_C LLAVE_A LProcesos LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Time",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                              Tiempo t = new Tiempo(Integer.parseInt(ii.trim())); // creo el nuevo tiempo
                              parser.tActual = t; //este nuevo tiempo es el actual
                              if(parser.tiempos.size()>0) //si no es el primer tiempo debo copiar los procesos del t anterior
                              {
                                Tiempo tAnterior = parser.tiempos.get(parser.tiempos.size()-1); //este es el tiempo anterior
                                int cProcesos = tAnterior.proceso.size(); //numero de procesos en el tiempo anterior
                                for (int i =0; i<cProcesos; i++)//recorro todos los procesos del tiempo anterior
                                {
                                  ProcesoS p = new ProcesoS(); //Creo el nuevo proceso que sera copia de c/proceso de t anterior
                                  p.id = tAnterior.proceso.get(i).id;
                                  p.recursos =  tAnterior.proceso.get(i).recursos;
                                  t.proceso.add(p);
                                }
                              }
                              parser.tiempos.add(t);
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= RECURSO R ENTERO PUNTOCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Recurso n = new Recurso(i);
                                  parser.recursos.add(n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Cuerpo ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cuerpo ::= Time 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Cuerpo ::= Declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cuerpo ::= error Cuerpo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cuerpo ::= Time Cuerpo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cuerpo ::= Declaracion Cuerpo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= SIMULACION LLAVE_A Cuerpo LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("El numero de recursos es: "+parser.recursos.size());
                                        System.out.println("El numero de tiempos es: "+parser.tiempos.size());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

